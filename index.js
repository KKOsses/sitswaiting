require('dotenv').config();
const express = require('express');
const axios = require('axios');
const multer = require('multer');
const path = require('path');
const fs = require('fs');

const app = express();
const port = process.env.PORT || 3000;

const upload = multer({ dest: 'public/uploads/' });

app.use('/public', express.static(path.join(__dirname, 'public')));
app.use(express.json());

// ‚úÖ ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å LINE ‚Üí ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î ‚Üí ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏•‡∏¥‡∏õ ‚Üí ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö
app.post('/webhook', upload.single('image'), async (req, res) => {
  try {
    const file = req.file;
    if (!file) return res.status(400).send('No file uploaded.');

    const fileName = file.filename;
    const publicUrl = `https://${process.env.DOMAIN}/public/uploads/${fileName}`;
    console.log('üì§ Uploaded File:', publicUrl);

    // ‚úÖ ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API SlipOK ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö
    const response = await axios.post(
      `https://api.slipok.com/api/line/apikey/${process.env.SLIPOK_BRANCH_ID}`,
      { url: publicUrl },
      {
        headers: {
          'x-authorization': process.env.SLIPOK_API_KEY,
          'Content-Type': 'application/json'
        }
      }
    );
    const data = response.data;
    console.log('‚úÖ SlipOK Response:', data);
    const userId = data.data?.userId || ''; // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ userId ‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

   if (data.code === 1009) {
     await replyText(userId, '‚ö†Ô∏è‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤23:00-02:00 ‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£ ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏î‡πâ\n‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏†‡∏≤‡∏¢‡∏´‡∏•‡∏±‡∏á');
     return res.status(200).send('Bank unavailable');
   }

    if (!data?.data?.verified) {
     await replyText(userId, '‚ùå ‡∏™‡∏•‡∏¥‡∏õ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
      return res.status(200).send('Slip not verified');
    }

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à (‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏ö‡∏ö Flex)
   await replyFlexReceipt(userId, data.data, publicUrl);

    res.status(200).json({ verified: true, data: data.data });

  } catch (err) {
    console.error('‚ùå ERROR:', err.response?.data || err.message);
    res.status(500).send('Error verifying slip.');
  }
});

app.listen(port, () => {
  console.log(`‚úÖ Server is running on port ${port}`);
});

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏•‡∏±‡∏ö LINE
async function replyText(userId, text) {
  return axios.post(
    'https://api.line.me/v2/bot/message/push',
    {
      to: userId,
      messages: [{ type: 'text', text }]
    },
    {
      headers: {
        Authorization: `Bearer ${process.env.LINE_TOKEN}`,
        'Content-Type': 'application/json'
      }
    }
  );
}

// ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á Flex Message ‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
async function replyFlexReceipt(userId, slip, receiptImageUrl) {
  const flex = {
    to: userId,
    messages: [{
      type: 'flex',
      altText: '‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      contents: {
        type: 'bubble',
        hero: {
          type: 'image',
          url: receiptImageUrl,
          size: 'full',
          aspectRatio: '4:3',
          aspectMode: 'cover'
        },
        body: {
          type: 'box',
          layout: 'vertical',
          contents: [
            {
              type: 'text',
              text: '‚úÖ ‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
              weight: 'bold',
              size: 'lg',
              color: '#1DB446'
            },
            {
              type: 'text',
              text: `‡∏ä‡∏∑‡πà‡∏≠: ${slip.sender_name}\n‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${slip.amount} ‡∏ö‡∏≤‡∏ó\n‡πÄ‡∏ß‡∏•‡∏≤: ${slip.transaction_date}`,
              size: 'sm',
              wrap: true
            }
          ]
        }
      }
    }]
  };

  return axios.post(
    'https://api.line.me/v2/bot/message/push',
    flex,
    {
      headers: {
        Authorization: `Bearer ${process.env.LINE_TOKEN}`,
        'Content-Type': 'application/json'
      }
    }
  );
}

